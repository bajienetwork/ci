# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Wails

on:
  workflow_dispatch:
    inputs:
      fetcher:
        description: '地址组'
        required: true
        default: 'kuainiao'
        type: string
      app_name:
        description: '应用的名称'
        required: true
        default: '快鸟加速'
        type: string
      package_name:
        description: '打包名称'
        required: true
        default: 'Kuainiao Boost'
        type: string
      app_icon:
        description: '应用图标的URL'
        required: false
        type: string
      sign_macos:
        description: '签名Mac应用'
        type: boolean
        default: false

run-name: ${{ inputs.app_name }} Wails CI

jobs:
  appicon:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'bajienetwork/desktop'
          token: ${{ secrets.PAT }}

      - name: Setup ImageMagick
        uses: mfinelli/setup-imagemagick@v5.0.1

      - name: Manipulate app icon
        working-directory: build
        if: ${{ inputs.app_icon != '' }}
        env:
          APPICON_URL: ${{ inputs.app_icon }}
        run: |
          RESOURCE=$RUNNER_TEMP/appicon
          CROPPED=$RUNNER_TEMP/cropped.png
          curl "$APPICON_URL" > "$RESOURCE"
          magick "$RESOURCE" -resize 810x810 -matte iconmatte.png -compose DstIn -composite "$CROPPED"
          magick "$CROPPED" \( +clone -background black -shadow 39x30+0+0 \) +swap -background none -layers merge +repage -gravity center -extent 1024x1024 appicon.png
          magick appicon.png -define icon:auto-resize=16,48,256 -compress zip windows/icon.ico

      - name: Copy products
        run: |
          mkdir products
          cp build/appicon.png products/mac_icon.png
          cp build/windows/icon.ico products/windows_icon.ico

      - name: Upload manipulated image
        uses: actions/upload-artifact@v4.3.6
        with:
          name: app_icons
          path: products/*

  build:
    strategy:
      matrix:
        os: [ macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    env:
      PACKAGE_NAME: ${{ inputs.package_name }}
    needs:
      - appicon
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'bajienetwork/desktop'
          token: ${{ secrets.PAT }}
          submodules: recursive

      - name: Bump version name
        shell: bash
        run: |
          OLD_NEW=$(cat const/version.go | grep 'VersionName = ' | awk '{split($0, a, "="); split(a[2], b, "\""); vername=b[2]; split(vername, verdigs, "."); print verdigs[1] "." verdigs[2]  "." verdigs[3]; print verdigs[1] "." verdigs[2]  "." verdigs[3]+1}')
          OLD=$(echo "$OLD_NEW" | head -n 1)
          NEW=$(echo "$OLD_NEW" | tail -n 1)
          
          # Replace const/version.go
          LAYOUT=version.go
          FILE_NAME=const/$LAYOUT
          cat "$FILE_NAME" | sed "s/$OLD/$NEW/" > "$RUNNER_TEMP/$LAYOUT"
          rm "$FILE_NAME"
          mv "$RUNNER_TEMP/$LAYOUT" "$FILE_NAME"
          
          git commit -a -m "Bump version name to $NEW"
          
          # Replace wails.json
          LAYOUT=wails.json
          cat "$LAYOUT" | sed "s/{{version name}}/$NEW/" > "$RUNNER_TEMP/$LAYOUT"
          rm "$LAYOUT"
          mv "$RUNNER_TEMP/$LAYOUT" "$LAYOUT"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.PAT }}
          repository: 'bajienetwork/desktop'
          force: true

      - name: Replace names
        shell: bash
        env:
          APP_NAME: ${{ inputs.app_name }}
        run: |
          LAYOUT=wails.json
          cat "$LAYOUT" | sed "s/{{app name}}/$APP_NAME/" | sed "s/{{package name}}/$PACKAGE_NAME/" > "$RUNNER_TEMP/$LAYOUT"
          rm "$LAYOUT"
          mv "$RUNNER_TEMP/$LAYOUT" "$LAYOUT"
          
          LAYOUT=dir_nodelve.go
          FILE_NAME=app_config/$LAYOUT
          cat "$FILE_NAME" | sed "s/{{package name}}/$PACKAGE_NAME/" > "$RUNNER_TEMP/$LAYOUT"
          rm "$FILE_NAME"
          mv "$RUNNER_TEMP/$LAYOUT" "$FILE_NAME"

      - name: Download app icons
        uses: actions/download-artifact@v4.1.8
        with:
          name: app_icons
          path: ${{ runner.temp }}

      - name: Replace app icons
        working-directory: build
        shell: bash
        run: |
          cp "$RUNNER_TEMP/mac_icon.png" appicon.png
          cp "$RUNNER_TEMP/windows_icon.ico" windows/icon.ico

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Set up wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Set up NodeJS
        uses: actions/setup-node@v4.0.3

      - name: Set up pnpm
        run: npm i -g pnpm

      - name: Build macOS
        run: wails build -platform darwin/universal -tags ${{ inputs.fetcher }}
        if: matrix.os == 'macos-latest'

      - name: Sign macOS
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.DEVELOPER_ID_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.DEVELOPER_ID_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CERTIFICATE_NAME: ${{ secrets.DEVELOPER_ID_CERTIFICATE_NAME }} (${{ secrets.APPLE_TEAM_ID }})
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/sign_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Use codesign to add code signature
          codesign --force --sign "$CERTIFICATE_NAME" "build/bin/$PACKAGE_NAME.app"
        if: matrix.os == 'macos-latest' && inputs.sign_macos

      - name: Compress macOS
        working-directory: build/bin
        run: |
          tar -czf "$PACKAGE_NAME.tar.gz" "$PACKAGE_NAME.app"
          rm -rf "$PACKAGE_NAME.app"
        if: matrix.os == 'macos-latest'

      - name: Build Windows
        run: |
          bash ./app/geoip/download.sh
          wails build -nsis -tags ${{ inputs.fetcher }}
        shell: bash
        if: matrix.os == 'windows-latest'

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4.3.6
        with:
          name: ${{ matrix.os }}
          path: build/bin/*
